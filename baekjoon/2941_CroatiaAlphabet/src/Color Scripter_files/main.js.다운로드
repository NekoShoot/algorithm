var mColorEditor;
var cs;
var codeText;	


var selectedLanguageName = "자동";
var selectedLanguageID = "text";

var editorNode;

var selectLanguagePopup;
var languageNodeLists;
var validLanguageLists;
var hoveredLanguageList;

var selectStylePackagePopup;
var stylePackageNodeLists;

var selectBGTypePopup;
var bgTypeNodeLists;

var stylePackageExampleCodes = {
	"text" : "Lorem Ipsum",
	"actionscript" : "function a() {\n  var b = 10;\n  trace(\"Hello World!\");\n}",
	"asp" : "<%\n  response.write(\"Hello World!\")\n%>",
	"bash" : "#!/bin/bash\n STRING=\"HELLO WORLD!\"\n echo $STRING ",
	"c" : "#include <stdio.h>\nint main (void) {\n  printf(\"Hello World\");\n  return 0;\n}",
	"c#" : "using System;\npublic class Class1\n{\n  public Class1()\n  {\n    Console.WriteLine(\"Hello, World!\");\n  }\n}",
	"css" : "input[type=text]{\n  color: blue\n}",
	"haxe" : "function a() {\n  var b = 10;\n  trace(\"Hello World!\");\n}",
	"html" : "<html>\n  <body>\n    <p align=\"center\">Hello World!</p>\n  </body>\n</html>",
	"java" : "package{\n  public class Class1{\n    public static void main(String arg[]) {\n      System.out.println(\"Hello World!\");\n    }\n  }\n}",
	"javascript" : "function a() {\n  var b = 10;\n  alert(\"Hello World!\");\n}",
	"jsp" : "<html>\n  <body>\n    <% out.println(\"Hello World!\"); %>\n  </body>\n</html>",
	"markdown" : "# markdown\n\n Social sites\n* [google](http://google.com)\n* [facebook](http://fb.com)",
	"objective-c" : "#import <stdio.h>\nint main(void)\n{\n  NSLog(@\"Hello, world!\");\n  return 0;\n}",
	"perl" : "sub main{\n  print \"Hello, world!\";\n}",
	"php" : "<?php\n  function main() {\n    $now = time();\n    echo \"Hello World\";\n  }\n?>",
	"python" : "def main:\n  print \"Hello World!\"",
	"ruby" : "def main()\n  puts \"Hello World!\"\nend",
	"sql" : "INSERT INTO `user` (a, b, c)\n  VALUES (100, 200, 300);",
	"swift" : "func main() {\n  var a = 0\n  println(\"Hello World!\")\n}",
	"visualbasic" : "Sub sub1\n  Dim a = 0\n  MsgBox \"Hello World!\"\nEnd Sub",
	"xml" : "<user>\n  <name type=\"first\">Bob</name>\n</user>"
};

var DEFAULT_SETTING_DETAIL_VALUE = {
	"bgColorType" : "single",
	"font" : "Consolas, 'Liberation Mono', Menlo, Courier, monospace",
	"lineHeight" : "130%",
	"copyLineNumber" : true,
	"lineNumberStartNum" : 1,
	
	"returnMode" : 1,
	"convertingTabToSpace" : true,
	"copyHtmlItSelf" : false,

	"restrictWidth" : false,
	"restrictWidthSize" : 600,
	"restrictHeight" : false,
	"restrictHeightSize" : 300
};

// copy
var settingDetailValue = JSON.parse(JSON.stringify(DEFAULT_SETTING_DETAIL_VALUE));

var EDITOR_DEFAULT_RETURN_MODE = ColorScripter.RETURN_SPAN_CSS_MODE;
var isRealtimeSupported;

var popupZIndex = 10;

var copyClipboardBtn;
var copyHTMLBtn;
var clipboardAlternativa;


var typingProgress = 0;

var clipboardContent = null;


window.addEventListener("load", function() {
	editorNode = document.getElementById("editor");

	mColorEditor = ColorEditor.register( editorNode, selectedLanguageID );
	codeText = mColorEditor.getCodeTextDOM();

	cs = mColorEditor.getColorScripter();
	cs.setReturnMode( EDITOR_DEFAULT_RETURN_MODE );


	updateLanguage();


	if ('localStorage' in window) {
		var tmp = window.localStorage.getItem('settingDetailValue');
		if (tmp) {
			settingDetailValue = JSON.parse(tmp);

			// legacy: copied from `saveSettingDetail`
			editorNode.style.fontFamily = settingDetailValue.font;
			codeText.style.fontFamily = settingDetailValue.font;
			codeText.style.lineHeight = settingDetailValue.lineHeight;
		}
	}

	mColorEditor.setHook("codeChanged", function(html, codeTextDOM) {
		// 하아라이팅된 코드를 복사하여 플래시에 전송 (returnMode에 맞게)
		cs.setReturnMode(parseInt(settingDetailValue.returnMode));
		cs.convertingTabToSpace = settingDetailValue.convertingTabToSpace;

		var rawText = mColorEditor.getRawCodeText();
		clipboardContent = getCodeForClipboard(rawText);

		try {
			clipboardAlternativa.sendToActionScript(clipboardContent, rawText, settingDetailValue.copyHtmlItSelf);
		}catch(e) {
			// console.log(e);
		}
		cs.setReturnMode( EDITOR_DEFAULT_RETURN_MODE );
		cs.convertingTabToSpace = false;
	});

	mColorEditor.setHook("keyUp", function (e) {
		typingProgress = 20;
	});

	mColorEditor.setHook("codePasted", function (e) {
		typingProgress = 0;
	});

	setInterval(function() {
		if (--typingProgress <= 0) {
			updateLanguage();
			typingProgress = 10000;
		}

	}, 50);

	

	//----------------------
	//
	//    상단 툴바 기능
	//
	//----------------------

	selectLanguagePopup = document.getElementById("select-language-popup");
	languageNodeLists = selectLanguagePopup.getElementsByTagName("li");

	selectStylePackagePopup = document.getElementById("select-stylepackage-popup");
	stylePackageNodeLists = selectStylePackagePopup.getElementsByTagName("li");

	selectBGTypePopup = document.getElementById("select-bgtype-popup");
	bgTypeNodeLists = selectBGTypePopup.getElementsByTagName("li");

	for (var i=0; i<languageNodeLists.length; i++) {
		languageNodeLists[i].addEventListener("click", languageNodeListsSelectHandler);
		languageNodeLists[i].addEventListener("mouseover", selectLanguageHoverHandler);
	}
	
	for (var i=0; i<stylePackageNodeLists.length; i++)
		stylePackageNodeLists[i].addEventListener("click", stylePackageListSelectHandler);
	
	for (var i=0; i<bgTypeNodeLists.length; i++)
		bgTypeNodeLists[i].addEventListener("click", bgTypeListSelectHandler);



	var realtimeToggle = document.getElementById("realtime-toggle");
	realtimeToggle.addEventListener("click", function (e) {
		if (!realtimeToggle.checked)
			mColorEditor.disableRealTime();
		else 
			mColorEditor.enableRealTime();
	});

	isRealtimeSupported = mColorEditor.getRealTimeEnabled();
	realtimeToggle.checked = isRealtimeSupported;

	if (!isRealtimeSupported) {
		var forbiddenMsgBox = document.getElementById("realtime-forbidden-msgbox");
		realtimeToggle.disabled = "disabled";
		realtimeToggle.parentNode.addEventListener("mouseover", function (e) { forbiddenMsgBox.style.visibility = "visible"; });
		realtimeToggle.parentNode.addEventListener("mouseout", function (e) { forbiddenMsgBox.style.visibility = "hidden"; });
	}


	
	


	if (window.ActiveXObject) {
		document.getElementById("clipboard-alternativa-container").innerHTML = '<object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" width="103" height="27" id="clipboard-alternativa" align="middle">' +
			'<param name="movie" value="/static/src/cb-alternativa.swf" />' +
			'<param name="quality" value="high" />' +
			'<param name="bgcolor" value="#ffffff" />' +
			'<param name="play" value="true" />' +
			'<param name="loop" value="false" />' +
			'<param name="wmode" value="transparent" />' +
			'<param name="allowScriptAccess" value="sameDomain" />' +
		'</object>';
	}else {
		document.getElementById("clipboard-alternativa-container").innerHTML = '<embed src="/static/src/cb-alternativa.swf" id="clipboard-alternativa" name="clipboard-alternativa"' +
			'width="103" height="27" align="middle" allowScriptAccess="sameDomain"' +
			'play="true" loop="false" quality="high" bgcolor="#ffffff"' +
			'type="application/x-shockwave-flash" quality="high" wmode="transparent"' +
			'pluginspage="http://www.macromedia.com/go/getflashplayer" />';
	}
	
	
	//----------------------
	//
	//    하단 툴바 기능
	//
	//----------------------

	copyClipboardBtn = document.getElementById("copy-clipboard-btn");
	copyHTMLBtn = document.getElementById("copy-html-btn");
	clipboardAlternativa = document.getElementById("clipboard-alternativa");
	
	clipboardAlternativa.addEventListener("mouseover", function () { copyClipboardBtn.className += " overed"; });
	clipboardAlternativa.addEventListener("mouseout", function () { copyClipboardBtn.className  = copyClipboardBtn.className.replace(" overed", ""); });
	clipboardAlternativa.addEventListener("mousedown", function () { copyClipboardBtn.className += " pressed"; });
	clipboardAlternativa.addEventListener("mouseup", function () {
		copyClipboardBtn.className  = copyClipboardBtn.className.replace(" pressed", "");
		
		if (!clipboardAlternativa || !clipboardAlternativa.sendToActionScript) {
			copyManually(true);
		}

		logS();
	});

	copyHTMLBtn.addEventListener("click", function () {
		if (!codeText.innerText) return;
		copyManually(false);
	})




	resizeHandler(null);
	
	loadPlugins();
	loadUserAndSponsor();
	mColorEditor.updateCode();

	openWelcomePopup();
	

	
	//----------------------
	//
	//    예외 HASH-function
	//
	//----------------------
	if (location.hash == "#upper-tools") {
		document.getElementById("bottom-tools").style.bottom = "initial";
		document.getElementById("bottom-tools").style.top = "120px";
	}

	if (location.hash.indexOf("#font-size:") == 0) {
		var fontSize = location.hash.split("#font-size:")[1];
		editorNode.style.fontSize = fontSize;
		codeText.style.fontSize = fontSize;

	}
	
});


// 딴 곳 클릭시 팝업 닫기
window.addEventListener("click", function (e) {
	var t = e.target || e.srcElement;
	
	if ((t == document || t == codeText) || (t.parentNode && t.parentNode == codeText) || (t.parentNode.parentNode && t.parentNode.parentNode == codeText)) {
		if (selectLanguagePopup.style.visibility == "visible") {
			toggleMenuPopup('language', false);;
			filterLanguageList("");
		}
		if (selectStylePackagePopup.style.visibility == "visible")
			toggleMenuPopup('stylepackage', false);

		if (selectBGTypePopup.style.visibility == "visible")
			toggleMenuPopup('bgtype', false);
	}
});


window.addEventListener("keyup", function (e) {

	// 팝업 검색 기능
	if (selectLanguagePopup && selectLanguagePopup.style.visibility == "visible") {
	
		var x = validLanguageLists.indexOf(hoveredLanguageList);

		if (e.keyCode == 13) {// 엔터키
			languageNodeListsSelectHandler(hoveredLanguageList, true);

		}else if (e.keyCode == 38) { // 위 키
			if (x == -1)
				hoveredLanguageList = validLanguageLists[ validLanguageLists.length - 1 ];
			else if (x != 0)
				hoveredLanguageList = validLanguageLists[ x - 1 ];

		}else if (e.keyCode == 40) { // 아래 키
			if (x == -1)
				hoveredLanguageList = validLanguageLists[0];
			else if (x != validLanguageLists.length - 1)
				hoveredLanguageList = validLanguageLists[ x + 1 ];
		
		}else
			return;

		showHoveredSelectLanguage();
	}
});


window.addEventListener("resize", resizeHandler);
function resizeHandler(e) {
	if (editorNode) {
		var winHeight = window.innerHeight || document.documentElement.clientHeight;
		editorNode.style.height = (winHeight - 63 - 38 - 45) + "px";
	}

	if (mColorEditor)
		mColorEditor.resize();
}




function openWelcomePopup() {
	/*if (!getCookie("visited_3")) {
		document.getElementById("mask").style.visibility = "visible";
		document.getElementById("mask").style.zIndex = ++popupZIndex;

		document.getElementById("welcome-popup").style.visibility = "visible";
		document.getElementById("welcome-popup").style.zIndex = ++popupZIndex;
	}*/
}

function closeWelcomePopup(dontSeeForever) {
	document.getElementById("mask").style.visibility = "hidden";
	document.getElementById("welcome-popup").style.visibility = "hidden";

	if (dontSeeForever)
		setCookie("visited_3", 1, 1000);
}



var msgBoxInterval;
function showMessageBox(message) {
	var msgBox = document.getElementById("message-box");
	msgBox.innerHTML = message;
	msgBox.style.marginLeft = "-" + msgBox.clientWidth / 2 + "px";
	msgBox.style.marginRight = "-" + msgBox.clientHeight / 2 + "px";
	msgBox.style.visibility = "visible";
	msgBox.style.zIndex = ++popupZIndex;
	msgBox.style.opacity = 0;

	if (msgBoxInterval) clearInterval(msgBoxInterval);

	var alpha = 0.1;
	msgBoxInterval = setInterval(function () {
		msgBox.style.opacity = parseFloat(msgBox.style.opacity) + alpha;

		if (parseFloat(msgBox.style.opacity) >= 1.5)
			alpha *= -1;

		else if (parseFloat(msgBox.style.opacity) < 0.2 && alpha < 0) {
			msgBox.style.visibility = "hidden";
			clearInterval(msgBoxInterval);
		}
	}, 50);
}




// 클립보드 복사전용 코드 생성
function getCodeForClipboard(text) {
	var lineNumHtml = "";
	var codeHtml = "";
	
	var rawCodeLines = text.split("\n");
	var codeLines = cs.color(text).split("\n");
	
	var foreground = cs.stylePackage.normal;
	var background = cs.stylePackage.backgroundColor ? cs.stylePackage.backgroundColor : "#fafafa";
	var background2 = cs.stylePackage.backgroundColor2 ? cs.stylePackage.backgroundColor2 : "#f0f0f0";
	
	var linenumberForeground = (parseInt( background.substr(1), 16 ) > 0x444444) ? "#666" : "#aaa";
	var linenumberBorderColor = (parseInt( background.substr(1), 16 ) > 0x444444) ? "#e5e5e5" : "#4f4f4f";
	var maxLineLength = 0;
	

	// 긴 워터마크 적용 여부 판단
	for (var i=0; i<rawCodeLines.length; i++) {
		if (maxLineLength < rawCodeLines[i].length) maxLineLength = rawCodeLines[i].length;
	}

	for (var i=0; i<rawCodeLines.length; i++) {
		lineNumHtml += '<div style="line-height:'+settingDetailValue.lineHeight+'">' + (i + parseInt(settingDetailValue.lineNumberStartNum)) + '</div>';
	}
	

	for (var i=0; i<codeLines.length; i++) {
		codeLines[i] = codeLines[i].trim(); //for ff
		
		if (codeLines[i] == "")
			codeLines[i] = "&nbsp;";

		codeHtml += ((settingDetailValue.bgColorType == "multi" && i % 2 == 1) ?
						'<div style="background-color:'+background2+'; padding:0 6px; white-space:pre; line-height:'+settingDetailValue.lineHeight+'">' : 
						'<div style="padding:0 6px; white-space:pre; line-height:'+settingDetailValue.lineHeight+'">'
					) + codeLines[i] + '</div>';
	}
	
	var codeElementType = settingDetailValue.convertingTabToSpace ? 'div' : 'pre';

	return '<div class="colorscripter-code" style="color:'+foreground+';font-family:'+settingDetailValue.font+' !important;'+(settingDetailValue.restrictWidth ? ' width:'+settingDetailValue.restrictWidthSize+'px;' : '')+(settingDetailValue.restrictHeight ? ' height:'+settingDetailValue.restrictHeightSize+'px;' : '')+' position:relative !important;overflow:auto">' +
		'<table class="colorscripter-code-table" style="margin:0;padding:0;border:none;'+(settingDetailValue.bgColorType == "none" ? '' : 'background-color:'+background+';')+'border-radius:4px;" cellspacing="0" cellpadding="0">' +
			'<tr>' +
				(settingDetailValue.copyLineNumber ? ('<td style="padding:6px;border-right:2px solid '+linenumberBorderColor+'">' +
					'<div style="margin:0;padding:0;word-break:normal;text-align:right;color:'+linenumberForeground+';font-family:'+settingDetailValue.font+' !important;line-height:'+settingDetailValue.lineHeight+'">' + lineNumHtml + '</div>' +
				'</td>') : '') +
				'<td style="padding:6px 0;text-align:left">' +
					'<'+codeElementType+' style="margin:0;padding:0;color:'+foreground+';font-family:'+settingDetailValue.font+' !important;line-height:'+settingDetailValue.lineHeight+'">' + codeHtml + '</'+codeElementType+'>' +
					(!isSponsor && maxLineLength > rawCodeLines[rawCodeLines.length-1].length + 30 ?('<div style="text-align:right;margin-top:-13px;margin-right:5px;font-size:9px;font-style:italic"><a href="http://colorscripter.com/info#e" target="_blank" style="color:'+linenumberBorderColor+'text-decoration:none">Colored by Color Scripter</a></div>') : '') +
				'</td>' + 
				(!isSponsor ? 
				'<td style="vertical-align:bottom;padding:0 2px 4px 0">' +
					'<a href="http://colorscripter.com/info#e" target="_blank" style="text-decoration:none;color:white"><span style="font-size:9px;word-break:normal;background-color:'+linenumberBorderColor+';color:white;border-radius:10px;padding:1px">cs</span></a>' +
				'</td>' : '') +
			'</tr>' +
		'</table>' +
	'</div>';
}


function copyManually(showFlashMessage) {
	document.getElementsByClassName("no-flash-message")[0].style.display = showFlashMessage ? "block" : "none";

	var popup = document.getElementById("copy-popup");
	var popupText = document.getElementById("copy-popup-text");

	popup.style.visibility = "visible";
	popup.style.zIndex =  ++popupZIndex;

	popupText.value = clipboardContent;
	popupText.focus();
	popupText.select();
}


// 클립보드 복사 완료시 플래시에서 보냄
function copyCompletedHandler() {
	showMessageBox("코드가 클립보드에 복사되었습니다");
}



function toggleMenuPopup(type, value) {
	var btn = document.getElementById('select-' + type + '-btn');
	var popup;
	var openHook, closeHook;

	switch (type) {
		case 'language' :
			popup = selectLanguagePopup;
			openHook = function (btn, popup) {
				popup.getElementsByTagName("input")[0].focus();
				filterLanguageList("");
			};
			closeHook = function (btn, popup) {
				document.getElementById("filter-input").value = "";
			};
			break;

		case 'stylepackage' :
			popup = selectStylePackagePopup;

			openHook = function (btn, popup) {
				var originPackageName = cs.stylePackage.packageName;
				var exampleCode = stylePackageExampleCodes[cs.selectedLanguage.name];

				var exampleCodeNodes = document.getElementsByClassName("example-code");
				for (var i=0; i<exampleCodeNodes.length; i++) {
					cs.selectStylePackage(
						exampleCodeNodes[i].parentNode.getElementsByTagName("input")[0].value
					);

					exampleCodeNodes[i].innerHTML = cs.color(exampleCode).split("\n").join("<br>");
					
					if (cs.stylePackage.backgroundColor) {
						exampleCodeNodes[i].parentNode.style.backgroundColor = cs.stylePackage.backgroundColor;
						exampleCodeNodes[i].parentNode.style.color = cs.stylePackage.normal;
					}
				}

				cs.selectStylePackage(originPackageName);
			};
			break;

		case 'bgtype' :
			popup = selectBGTypePopup;
			openHook = function (btn, popup) {
				popup.style.left = btn.offsetLeft + "px";
			};
			break;
	}

	if (btn == value && popup != null)
		value = (popup.style.visibility != "visible");


	// 열기
	if (value) {
		if (popup != null) {
			popup.style.visibility = "visible";
			popup.style.zIndex = ++popupZIndex;
			btn.className += " pressed";
		}

		['language', 'stylepackage', 'bgtype'].forEach(function (typeVal, index, arr) {
			if (typeVal != type)
				toggleMenuPopup(typeVal, false);
		});

		if (openHook != null)
			openHook(btn, popup);

	// 닫기
	}else {
		if (popup != null) {
			popup.style.visibility = "hidden";
			btn.className = btn.className.replace(" pressed", "");
		}

		if (closeHook != null)
			closeHook();
	}
}



// 세부설정 창 열기/닫기
function toggleSettingDetailPopup(value) {
	var mask = document.getElementById("mask");
	var popup = document.getElementById("setting-detail-popup");

	if (value.id == "setting-detail-btn") value = (popup.style.visibility != "visible");

	// 열기
	if (value) {
		applyDataToForm(settingDetailValue, settingDetailForm);

		mask.style.visibility = "visible";
		mask.style.zIndex = ++popupZIndex;

		popup.style.visibility = "visible";
		popup.style.zIndex = ++popupZIndex;
		
		toggleMenuPopup(null, true); // close all

	// 닫기
	}else {
		mask.style.visibility = "hidden";
		popup.style.visibility = "hidden";
	}
}



// 세부설정 저장
function saveSettingDetail() {
	document.getElementById("mask").style.visibility = "hidden";
	document.getElementById("setting-detail-popup").style.visibility = "hidden";

	settingDetailValue = formDataToObject(settingDetailForm);
	editorNode.style.fontFamily = settingDetailValue.font;
	codeText.style.fontFamily = settingDetailValue.font;

	codeText.style.lineHeight = settingDetailValue.lineHeight;
	//codeChangeHandler(null);
	mColorEditor.updateCode();

	if ('localStorage' in window) {
		window.localStorage.setItem('settingDetailValue', JSON.stringify(settingDetailValue));
	}
}
// 세부설정 닫기
function cancelSettingDetail() {
	document.getElementById("mask").style.visibility = "hidden";
	document.getElementById("setting-detail-popup").style.visibility = "hidden";
}
// 세부설정 초기화
function resetSettingDetail() {
	applyDataToForm(DEFAULT_SETTING_DETAIL_VALUE, settingDetailForm);
}




// 공유하기 창 열기
function openSharingPopup() {
	if (!codeText.innerHTML) return;

	var mask = document.getElementById("mask");
	var popup = document.getElementById("sharing-popup");

	mask.style.visibility = "visible";
	mask.style.zIndex = ++popupZIndex;

	popup.style.marginTop = "-" + (popup.clientHeight / 2) + "px";
	popup.style.visibility = "visible";
	popup.style.zIndex = ++popupZIndex;
	
	//toggleSelectLanguagePopup(false);
	//toggleSelectStylePackagePopup(false);
	toggleMenuPopup(null, true); // close all
}




// 공유하기 취소
function cancelSharing() {
	document.getElementById("mask").style.visibility = "hidden";
	document.getElementById("sharing-popup").style.visibility = "hidden";

	document.getElementById("sharing-popup-c1").style.display = "block";
	document.getElementById("sharing-popup-c2").style.display = "none";

	sharingForm.reset();
}


// 공유하기 업로드
function completeSharing() {
	var innerText = mColorEditor.getRawCodeText();
	
	// sharingForm.code.value = innerText;
	// sharingForm.language.value = cs.selectedLanguage.name;

	var payload = {
		code: innerText,
		language: cs.selectedLanguage.name,
		email: sharingForm.email.value,
		description: sharingForm.description.value,
	};

	apiClient.post('/shares/', payload)
		.then(function (response) {
			var result = response.data;

			document.getElementById("sharing-popup-c1").style.display = "none";
			document.getElementById("sharing-popup-c2").style.display = "block";

			document.getElementById("sharing-url-text").value
				= document.getElementById("sharing-url-anchor").href
				= "http://colorscripter.com/s/" + result.id;

			document.getElementById("sharing-url-text").select();
		})
		.catch(function (error) {
			alert("오류가 발생했습니다");
			console.error(error);
		});
	//sharingForm.submit();
}

function logS() {
	var lang = (selectedLanguageName.indexOf('자동') == 0) ? selectedLanguageName : selectedLanguageID;
	var lang_est = document.getElementById("language-auto-li").innerHTML;
	
	if (lang_est.indexOf('(') != -1) lang_est = lang_est.split('(')[1].split(')')[0];
	else lang_est = '';

	var payload = {
		'code': mColorEditor.getRawCodeText(),
		'language': lang,
		'language_est': lang_est,
		'stylepackage': cs.stylePackage.packageName,
		'extra_data': JSON.stringify({'settings': settingDetailValue})
	};
	apiClient.post('/code/log', payload);
}





function updateLanguage(liDOM) {
	if (liDOM) {
		var langName = liDOM.innerHTML.trim();

		if (langName.indexOf("자동") == 0) {
			langName = "자동";
			selectedLanguageID = "text";

		}else if (langName.indexOf("plugin") != -1) {
			langName = langName.split("<span")[0];
			if (langName.indexOf('<') != -1) langName = langName.split('<')[0];
			selectedLanguageID = liDOM.getElementsByTagName('input')[0].value;

		}else {
			if (langName.indexOf('<') != -1) langName = langName.split('<')[0];
			selectedLanguageID = langName.toLowerCase().replace(" ", "");
		}

		document.getElementById("selected-language-name").innerHTML = selectedLanguageName = langName;
	}

	// 로컬 기반의 언어 탐지기 사용
	var codeText = mColorEditor.getRawCodeText();
	var tmpLangID = 'text';

	if (codeText) {
		var detectResult = Shaman.detect(mColorEditor.getRawCodeText());
		if (detectResult.length > 1 && detectResult[0][1] >= 25)
			tmpLangID = detectResult[0][0];
	}

	var langNameWithDected =  '자동(' + tmpLangID + ')';
	document.getElementById("language-auto-li").innerHTML = langNameWithDected;
		
	if (selectedLanguageName.indexOf("자동") == 0) {
		document.getElementById("selected-language-name").innerHTML = langNameWithDected;

		selectedLanguageID = tmpLangID;
		selectedLanguageName = langNameWithDected;

		cs.selectLanguage( selectedLanguageID );
		mColorEditor.updateCode();
	}


	/*apiClient.post('/code/detect', {'code': mColorEditor.getRawCodeText()}, {withCredentials: false})
		.then(function (response) {
			var result = response.data;
			var tmpLangID;

			if (result.length > 1 && result[0][1] >= 25)
				tmpLangID = result[0][0];
			else 
				tmpLangID = 'text';

			var langNameWithDected =  '자동(' + tmpLangID + ')';
			document.getElementById("language-auto-li").innerHTML = langNameWithDected;
				
			if (selectedLanguageName.indexOf("자동") == 0) {
				document.getElementById("selected-language-name").innerHTML = langNameWithDected;

				selectedLanguageID = tmpLangID;
				selectedLanguageName = langNameWithDected;

				cs.selectLanguage( selectedLanguageID );
				mColorEditor.updateCode();
			}
		})
		.catch(function (error) {
			console.log(error);
			// error
			document.getElementById("language-auto-li").innerHTML = '선택안됨';
			if (selectedLanguageName.indexOf("자동") == 0)
				document.getElementById("selected-language-name").innerHTML = '선택안됨';
		});*/

	cs.selectLanguage( selectedLanguageID );
	mColorEditor.updateCode();
}


// 언어 선택창 리스트 선택시
function languageNodeListsSelectHandler(e, eIsNotEventAndTarget) {
	var target;
	if (eIsNotEventAndTarget) target = e;
	else target = e.target || e.srcElement;

	if (target && target.className == "plugin") target = target.parentNode;

	for (var i=0; i<languageNodeLists.length; i++) {
		if (languageNodeLists[i].className != "")
			languageNodeLists[i].className = "";
	}
	if (!target) return;

	target.className = "selected";
	

	updateLanguage(target);
	

	toggleMenuPopup('language', false);

	document.getElementById("filter-input").value = "";
	filterLanguageList("");

	//codeChangeHandler(null);
	mColorEditor.updateCode();
}



// 언어선택창 mouseover 이벤트처리
function selectLanguageHoverHandler(e) {
	var target = e.target || e.srcElement;
	if (target.className == "plugin") return;

	hoveredLanguageList = target;
	showHoveredSelectLanguage();
}

// 언어선택창 over된 리스트 반환 (위키, 아래키 누를때 올리고 내리기 위해 사용)
function showHoveredSelectLanguage() {
	for (var i=0; i<languageNodeLists.length; i++) {
		if (languageNodeLists[i].className.indexOf("hovered") != -1)
			languageNodeLists[i].className = languageNodeLists[i].className.replace(" hovered", "");
	}

	if (hoveredLanguageList)
		hoveredLanguageList.className += " hovered";
}

// 언어선택창 검색
function filterLanguageList(data) {
	validLanguageLists = [];

	for (var i=0; i<languageNodeLists.length; i++) {
		var s = languageNodeLists[i].innerHTML;
		var capString = "";

		if (s != s.toLowerCase() && s != s.toUpperCase()) {
			for (var j=0; j<s.length; j++) {
				if (s[j] == s[j].toUpperCase()) capString += s[j];
			}
		}

		if (s.toLowerCase().indexOf(data.toLowerCase()) == 0 || capString.toLowerCase().indexOf(data.toLowerCase()) == 0) {
			showItem = true;
			validLanguageLists.push( languageNodeLists[i] );
		}else
			showItem = false;

		languageNodeLists[i].style.display = showItem ? "block" : "none";
	}

	if (!hoveredLanguageList || validLanguageLists.indexOf(hoveredLanguageList) == -1) {
		hoveredLanguageList = validLanguageLists[0];
		showHoveredSelectLanguage();
	}
}



// 스타일 패키지 리스트 선택시
function stylePackageListSelectHandler(e) {
	var target = e.target || e.srcElement;
	for (var i=0; i<stylePackageNodeLists.length; i++) {
		if (stylePackageNodeLists[i].className.indexOf("selected") != -1)
			stylePackageNodeLists[i].className = stylePackageNodeLists[i].className.replace("selected", "");
	}

	if (target.tagName.toLowerCase() != "li") {
		target = target.parentNode;

		if (target.tagName.toLowerCase() != "li")
			target = target.parentNode;
	}

	target.className += " selected";
	document.getElementById("selected-stylepackage-name").innerHTML = target.getElementsByTagName("h4")[0].innerHTML.split('<span')[0];

	cs.selectStylePackage( target.getElementsByTagName("input")[0].value );

	mColorEditor.updateCode();

	editorNode.style.backgroundColor = mColorEditor.getEditorDOM().style.backgroundColor;

	toggleMenuPopup('stylepackage', false);
}


// 배경 종류 리스트 선택시
function bgTypeListSelectHandler(e) {
	var target = e.target || e.srcElement;

	for (var i=0; i<bgTypeNodeLists.length; i++) {
		if (bgTypeNodeLists[i].className.indexOf("selected") != -1)
			bgTypeNodeLists[i].className = bgTypeNodeLists[i].className.replace("selected", "");
	}

	target.className += " selected";
	document.getElementById("selected-bgtype-name").innerHTML = target.innerText;

	settingDetailValue.bgColorType = target.getElementsByTagName("input")[0].value;
	toggleMenuPopup('bgtype', false);
}



function goExtendingStore() {
	window.open(EXTENDING_STORE_URL, "_blank");
}

function loadPlugins() {
	apiClient.get('/plugin/applied')
		.then(function (response) {
			var data = response.data;

			if (data.languages.length == 0 && data.stylepackages.length == 0) return;

			EDITOR_DEFAULT_RETURN_MODE = ColorScripter.RETURN_SPAN_MODE;
			cs.setReturnMode( EDITOR_DEFAULT_RETURN_MODE );
			
			for (var i=0; i<data.languages.length; i++) {
				var row = data.languages[i];
				ColorScripter.languages[row.id] = row['$data'];
				stylePackageExampleCodes[row.id] = row.example_code.split("\t").join("  ");

				var newLi = document.createElement("li");
				newLi.innerHTML = row.name + '<span class="plugin">plugin</span>\
					<input type="hidden" name="lang-name" value="'+row.id+'">';

				newLi.addEventListener("click", languageNodeListsSelectHandler);
				newLi.addEventListener("mouseover", selectLanguageHoverHandler);

				selectLanguagePopup.getElementsByTagName("ul")[0].appendChild(newLi);
			}


			for (var i=0; i<data.stylepackages.length; i++) {
				var row = data.stylepackages[i];
				ColorScripter.stylePackages[row.id] = row['$data'];

				var newLi = document.createElement("li");
				newLi.className = "plugin";
				newLi.innerHTML = '<h4>' + row.name + '<span class="plugin">plugin</span></h4>\
					<input type="hidden" name="package-name" value="'+row.id+'">\
					<div class="example-code"></div>';

				newLi.addEventListener("click", stylePackageListSelectHandler);

				selectStylePackagePopup.getElementsByTagName("ul")[0].appendChild(newLi);
			}


			languageNodeLists = selectLanguagePopup.getElementsByTagName("li");
			stylePackageNodeLists = selectStylePackagePopup.getElementsByTagName("li");

			document.getElementById("plugin-btn").className += ' actived';
		});
}


var isSponsor = false;
function loadUserAndSponsor() {
	apiClient.get('/auth')
		.then(function (response) {
			var data = response.data;

			if (data.logged) {
				var dom = document.getElementById('login-info');
				dom.className += ' logged';

				var nameDom = dom.getElementsByTagName('a')[0];
				nameDom.innerHTML = data.data.name;
				nameDom.className += ' active';

				
				if (data.data.sponsor) {
					isSponsor = true;
					document.getElementById('sponsor-connected').style.display = 'block';
					document.getElementById('ad-box').style.display = 'none';

				} else {
					// show ad if looged user is not sponsor
					(adsbygoogle = window.adsbygoogle || []).push({});
				}

				if (ga) {
					ga('set', 'userId', data.data.email);
					ga('send', 'pageview');
				}
				
			} else {
				// show ad to not looged user, either.
				(adsbygoogle = window.adsbygoogle || []).push({});
			}
		});
}
